package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    // Fields
    private final JoinPredicate joinPredicate;
    private OpIterator child1;
    private OpIterator child2;
//    // create a mapping from tupleDesc to a list of those tuples
//    private Map<Field, List<Tuple>> child1Map;
//    private Queue<Tuple> joinBuffer;
    private Tuple child1Tuple;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.joinPredicate = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.joinPredicate;
    }

    private OpIterator getChild1() {
        return this.child1;
    }

    private OpIterator getChild2() {
        return this.child2;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return getChild1().getTupleDesc().getFieldName(getJoinPredicate().getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return getChild2().getTupleDesc().getFieldName(getJoinPredicate().getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(getChild1().getTupleDesc(), getChild2().getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        getChild1().open();
        getChild2().open();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        getChild1().close();
        getChild2().close();
        this.child1Tuple = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        getChild1().rewind();
        getChild2().rewind();
        this.child1Tuple = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        // just do nested join
        while (true) {
            if (this.child1Tuple == null) {
                if (getChild1().hasNext()) {
                    this.child1Tuple = getChild1().next();
                    getChild2().rewind();
                } else
                    break;
            }
            while (getChild2().hasNext()) {
                Tuple child2Tuple = getChild2().next();
                if (getJoinPredicate().filter(this.child1Tuple, child2Tuple))
                    return mergeTuple(this.child1Tuple, child2Tuple);
            }
            this.child1Tuple = null;
        }
        return null;
    }

    private Tuple mergeTuple(Tuple t1, Tuple t2) {
        TupleDesc mergedTupleDesc = TupleDesc.merge(t1.getTupleDesc(), t2.getTupleDesc());
        Tuple mergedTuples = new Tuple(mergedTupleDesc);

        int index = 0;
        Iterator<Field> t1Iterator = t1.fields();
        Iterator<Field> t2Iterator = t2.fields();
        while (t1Iterator.hasNext())
            mergedTuples.setField(index++, t1Iterator.next());
        while (t2Iterator.hasNext())
            mergedTuples.setField(index++, t2Iterator.next());
        return mergedTuples;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[] {getChild1(), getChild2()};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
